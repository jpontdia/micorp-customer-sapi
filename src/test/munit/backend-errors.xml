<?xml version="1.0" encoding="UTF-8"?>

<mule
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core
		http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit
		http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  
		http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
		http://www.mulesoft.org/schema/mule/http 
		http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/ee/core 
		http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
		http://www.mulesoft.org/schema/mule/validation 
		http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">

	<munit:config name="backend-errors" />

	<munit:test
		name="post-customer-not-created"
		description="post-customer-not-created">
		
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="api-main" />
			<munit:enable-flow-source value="get:\customers:api-config" />
			<munit:enable-flow-source value="get:\customers\(customerId):api-config" />
			<munit:enable-flow-source value="delete:\customers\(customerId):api-config" />
			<munit:enable-flow-source value="post:\customers:application\json:api-config" />
		</munit:enable-flow-sources>
				
		<munit:behavior>
			<munit:set-event
				doc:name="Set Input"
				doc:id="ee5c701f-bc3b-48a6-b70f-e62dff2a0317">
				<munit:payload
					value="#[readUrl('classpath://post/set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://orderapiconsoletest/set-event_attributes.dwl')]" />
			</munit:set-event>

			<munit-tools:mock-when
				doc:name="no Customer on Database"
				processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="queryCustomer"
						attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[&#10;[]&#10;]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>

			<munit-tools:mock-when
				doc:name="Salesforce not success"
				processor="salesforce:create">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Customer__c"
						attributeName="type" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value='#[&#10;%dw 2.0&#10;output application/json&#10;---&#10;{ "successful": "false"}&#10;]'
						encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>

		<munit:execution>
			<flow-ref
				doc:name="post"
				name="post:\customers" />
			<logger 
				level="INFO" 
				doc:name="Logger" 
				message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	message: "Result from customer creation",&#10;	status: vars.httpStatus,&#10;	payload: payload&#10;}]'/>
				
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-equals
				doc:name="status 500"
				actual="#[vars.httpStatus]"
				expected='#["500"]'
				message="The status code must be 500" />
			<munit-tools:assert-that
				doc:name="verify response"
				expression='#[payload.message contains "${messages.record-create-error}"]'
				is="#[MunitTools::notNullValue()]" />
		</munit:validation>
	</munit:test>


	<munit:test name="post-customer-backend-exception" >
		<munit:behavior>
			<munit:set-event doc:name="Set Input">
				<munit:payload
					value="#[readUrl('classpath://post/set-event_payload.dwl')]"
					encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://orderapiconsoletest/set-event_attributes.dwl')]" />
			</munit:set-event>
			<munit-tools:mock-when
				doc:name="no Customer on Database"
				processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="queryCustomer"
						attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[&#10;[]&#10;]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Salesforce not success"
				processor="salesforce:create">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Customer__c"
						attributeName="type" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value='#[&#10;%dw 2.0&#10;output application/json&#10;---&#10;{ "successful": "false"}&#10;]'
						encoding="UTF-8" />
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try">
				<flow-ref
					doc:name="post"
					name="post:\customers" />

				<error-handler>
					<on-error-continue
						enableNotifications="true"
						logException="true"
						doc:name="On Error Continue">

						<logger
							level="INFO"
							doc:name="Logger"
							message="An error was produced in the tested flow" />
					</on-error-continue>
				</error-handler>
			</try>

			<logger
				level="INFO" 
				doc:name="result" 
				message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	message: "Result from customer creation",&#10;	status: vars.httpStatus,&#10;	payload: payload&#10;}]'/>

		</munit:execution>
		<munit:validation>
			<munit-tools:assert-equals
				doc:name="status 500"
				actual="#[vars.httpStatus]"
				expected='#["500"]'
				message="The status code must be 500" />
			<munit-tools:assert-that
				doc:name="verify response"
				expression='#[payload.message contains "${messages.backend-error}"]'
				is="#[MunitTools::notNullValue()]" />
		</munit:validation>
	</munit:test>
	
	
	<munit:test name="delete-with-fake-id">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="api-main" />
			<munit:enable-flow-source value="get:\customers:api-config" />
			<munit:enable-flow-source value="get:\customers\(customerId):api-config" />
			<munit:enable-flow-source value="delete:\customers\(customerId):api-config" />
			<munit:enable-flow-source value="post:\customers:application\json:api-config" />
		</munit:enable-flow-sources>

		<munit:execution>

			<logger 
				level="INFO" 
				doc:name="start"
				message="Test delete with fake id"/>

			<http:request
				method="DELETE"
				doc:name="Delete"
				config-ref="http_test_local_configuration"
				path="/api/customers/{customerId}">
				<http:headers><![CDATA[#[output application/java
---
{
	"Content-Type" : "application/json"
}]]]></http:headers>
				<http:uri-params><![CDATA[#[output application/java
---
{
	"customerId" : "a018b00000yYNxGAA1"
}]]]></http:uri-params>
				<http:response-validator>
					<http:success-status-code-validator values="200,400" />
				</http:response-validator>
			</http:request>

			<logger
				level="INFO" 
				doc:name="result"
				message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	message: "Result",&#10;	payload: payload&#10;}]' />

		</munit:execution>

		<munit:validation>
			<munit-tools:assert-equals
				actual="#[attributes.statusCode]"
				expected="#[400]"
				message="The status code must be 400"
				doc:name="status 400" />
			<munit-tools:assert-that
				doc:name="verify message"
				expression='#[payload.message contains "${messages.record-delete-error}"]'
				is="#[MunitTools::notNullValue()]" />
		</munit:validation>
	</munit:test>	

</mule>